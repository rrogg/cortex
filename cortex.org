#+TITLE: CORTEX - AN EMACS CONFIGURATION
#+PROPERTY: header-args :result silent :tangle "~/.emacs.d/init.el" :eval no-export :comments org

* Track Loading Time of Cortex

Starting Emacs has to be as quick as possible. In order to evaluate the time it
takes to load Cortex, someone has to blow the whistle and start the stopwatch.

#+BEGIN_SRC emacs-lisp
(defvar my-cortex-start-time (current-time) "Time when Cortex was started")
#+END_SRC

* Wrap Lines at a Reasonable Width

Long lines of text have to be wrapped at a width of 80 characters. In order to
leave long code lines untouched, automatic line wrap is only active in
=text-mode= and modes which inherit from =text-mode=, like e.g. =org-mode=.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
(add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC

* Stop the Bell

Acoustic feedback is not wanted for this system. Therefore stop ringing the bell!

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function #'ignore)
#+END_SRC

* Hide Welcome Screen and Empty =*scratch*=

Emacs shows a splash screen at startup from which one can easily get to the
tutorial. While helpful in the beginning, this screen gets abdicable with
time. Therefore it's disabled.
Emacs also automatically loads a buffer called =*scratch*=, which serves as a
place to try out emacs lisp code or to type out some ideas. This is very helpful
as one doesn't have to think about creating a new file for every unrelated
thought. The welcome message isn't needed, so it gets disabled.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      initial-scratch-message nil)
#+END_SRC

* Final Spurt

This is the end of Cortex. Let's see how much time it took to load all of the
shenanigans. Write the result to the =Messages= buffer.

#+BEGIN_SRC emacs-lisp
(message "→★ Finished loading Cortex in %.2fs" (float-time (time-subtract (current-time) my-cortex-start-time)))
#+END_SRC
